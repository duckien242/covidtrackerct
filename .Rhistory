View(metadata_CT_who)
runApp()
# attempts at Table 1
who_daily <- metadata_CT_who %>% group_by(`date`) %>% count(who_variants) %>%
mutate(freq = round(100*n/sum(n),2))
View(who_daily)
# attempts at Table 1
who_daily <- metadata_CT_who %>% group_by(`who_variants`) %>% count() %>%
mutate(freq = round(100*n/sum(n),2))
max(metadata_CT_all$date)
max(metadata_CT_all$date_submitted)
# attempts at Table 1
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`)
# attempts at Table 1
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
group_by(`who_variants`) %>% count() %>%
mutate(freq = round(100*n/sum(n),2))
View(cumulative)
# attempts at Table 1
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
group_by(`who_variants`) %>% count()
# attempts at Table 1
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
group_by(`who_variants`)
# attempts at Table 1
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
group_by(`who_variants`) %>% count()
# attempts at Table 1
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
count()
# attempts at Table 1
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
group_by(`who_variants`) %>% count()
View(names)
# attempts at Table 1
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
group_by(`pango_lineage`) %>% count()
# attempts at Table 1
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
group_by(`who_variants`) %>% count()
last_3_weeks <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
subset(`date` >= "2022-06-02")
last_3_weeks <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
subset(`date` >= "2022-06-02") %>%
group_by(`who_variants`) %>% count()
View(last_3_weeks)
last_3_weeks <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
subset(`date` >= "2022-06-02") %>%
group_by(`who_variants`) %>%
count() %>%
mutate(freq = round(100*n/sum(n),2))
last_3_weeks <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
subset(`date` >= "2022-06-02") %>%
count(`who_variants`) %>%
mutate(freq = round(100*n/sum(n),2))
# attempts at Table 1
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
group_by() %>% count(`who_variants`)
View(cumulative)
# attempts at Table 1
table1 = read.csv("Table1.csv")
View(table1)
# attempts at Table 1
table1 = read.csv("data/Table1.csv")
View(table1)
colnames(table1)
View(cumulative)
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
group_by() %>% count(`who_variants`) %>%
colnames = c("who_variants","Cumulative.sequenced.cases.")
colnames(cumulative) = c("who_variants","Cumulative.sequenced.cases.")
View(cumulative)
tab = merge(table1,cumulative[,c("who_variants","Cumulative.sequenced.cases.")], by = "who_variants", all.x = TRUE)
tab = merge(table1,cumulative[,c("who_variants","Cumulative.sequenced.cases.")], by = "who_variants", all.x = TRUE)
tab = merge(table1,cumulative[,c("WHO.label","Cumulative.sequenced.cases.")], by = "WHO.label", all.x = TRUE)
colnames(cumulative) = c("WHO.label","Cumulative.sequenced.cases.")
tab = merge(table1,cumulative[,c("WHO.label","Cumulative.sequenced.cases.")], by = "WHO.label", all.x = TRUE)
View(tab)
View(last_3_weeks)
colnames(table1)
colnames(last_3_weeks) = c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")
tab1 = merge(tab,last_3_weeks[,c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")], by = "WHO.label", all.x = TRUE)
View(tab1)
table1_new = merge(tab,last_3_weeks[,c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")], by = "WHO.label", all.x = TRUE)
View(table1_new)
which(is.na(table1_new[,c(8:10)]))
table1_new[c(which(is.na(table1_new[,c(8:10)]))),] <- 0
table1_new[c(which(is.na(table1_new[,c(8:10)]))),c(8:10)] <- 0
table1_new[c(which(is.na(table1_new[,c(8:10)]))),c(8:10)]
table1_new[c(which(is.na(table1_new[,c(8:10)]))),c(8:10)] = 0
table1_new = merge(tab,last_3_weeks[,c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")], by = "WHO.label", all.x = TRUE)
table1_new[c(which(is.na(table1_new[,c(8:10)]))),c(8:10)] = 0
table1_new = merge(tab,last_3_weeks[,c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")], by = "WHO.label", all.x = TRUE)
table1_new[is.na(table1_new)] <- 0
colnames(table1)
table1_new$`Percent.change.from.previous.report` = table1_new$`Percent.sequenced.from.past.3.weeks...y` - table1_new$`Percent.sequenced.from.past.3.weeks...x`
# attempts at Table 1
table1_old = read.csv("data/Table1.csv")
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
group_by() %>% count(`who_variants`)
colnames(cumulative) = c("WHO.label","Cumulative.sequenced.cases.")
tab = merge(table1_old,cumulative[,c("WHO.label","Cumulative.sequenced.cases.")], by = "WHO.label", all.x = TRUE)
last_3_weeks <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
subset(`date` >= "2022-06-02") %>% # update date every 3 weeks
count(`who_variants`) %>%
mutate(freq = round(100*n/sum(n),2))
colnames(last_3_weeks) = c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")
table1_new = merge(tab,last_3_weeks[,c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")], by = "WHO.label", all.x = TRUE)
table1_new[is.na(table1_new)] <- 0
table1_new$`Percent.change.from.previous.report` = table1_new$`Percent.sequenced.from.past.3.weeks...y` - table1_new$`Percent.sequenced.from.past.3.weeks...x`
View(table1_new)
table1_new$`Percent.change.from.previous.report.y` = table1_new$`Percent.sequenced.from.past.3.weeks...y` - table1_new$`Percent.sequenced.from.past.3.weeks...x`
table1_new = table1_new[,-c(4:7)]
colnames(table1_new) = c("Pango lineage	WHO label	CDC classification",
"Cumulative sequenced cases*",
"Total sequenced from past 3 weeks**",
"Percent sequenced from past 3 weeks**",
"Percent change from previous report")
View(table1_new)
colnames(table1_new) = c("Pango lineage",
"WHO label",
"CDC classification",
"Cumulative sequenced cases*",
"Total sequenced from past 3 weeks**",
"Percent sequenced from past 3 weeks**",
"Percent change from previous report")
write.csv(table1_new,"data/Table1.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
metadata_CT_all = read.csv("data/metadata_CT_all.csv")
metadata_CT_all = metadata_CT_all[,-c(1)]
metadata_CT_all["pango_lineage"][metadata_CT_all["pango_lineage"] == "BA.2.12.1 (marker override: BA.2.12 + Spike_L452Q => BA.2.12.1)"] = "BA.2.12.1"
metadata_CT_recent = metadata_CT_all[metadata_CT_all$`date` >= "2022-03-22",] # filter by last 3 months
metadata_CT_recent =  metadata_CT_recent[!is.na(metadata_CT_recent$`pango_lineage`),]
metadata_CT_all$`date` <- as.Date(metadata_CT_all$`date`)
metadata_CT_all <- metadata_CT_all %>% mutate(CopyDate = `date`)
metadata_CT_all <- metadata_CT_all %>% group_by(`week` = cut(`CopyDate`, "week"))
metadata_CT_all$week <- as.Date(metadata_CT_all$week)
#delete data without week assigned
metadata_CT_all <- metadata_CT_all[!is.na(metadata_CT_all$`week`),]
# metadata_CT_all$who_variants = NA
# metadata_CT_all$who_variants[names$pango_variants == metadata_CT_all$pango_lineage] <- names$who_variants[names$pango_variants == metadata_CT_all$pango_lineage]
metadata_CT_who = merge(metadata_CT_all,names[,c("pango_lineage","who_variants")], by = "pango_lineage", all.x = TRUE)
#metadata_CT_all$who_names <- names[match(metadata_CT_all$pango_lineage,names$pango_variants),2]
metadata_CT_who[which(is.na(metadata_CT_who$who_variants)),31] <- 'Other'
metadata_CT_who[which(metadata_CT_who$who_variants == "Eta"),31] <- 'Other'
# mix and match
names = read.csv("data/variant_names.csv")
# metadata_CT_all$who_variants = NA
# metadata_CT_all$who_variants[names$pango_variants == metadata_CT_all$pango_lineage] <- names$who_variants[names$pango_variants == metadata_CT_all$pango_lineage]
metadata_CT_who = merge(metadata_CT_all,names[,c("pango_lineage","who_variants")], by = "pango_lineage", all.x = TRUE)
#metadata_CT_all$who_names <- names[match(metadata_CT_all$pango_lineage,names$pango_variants),2]
metadata_CT_who[which(is.na(metadata_CT_who$who_variants)),31] <- 'Other'
metadata_CT_who[which(metadata_CT_who$who_variants == "Eta"),31] <- 'Other'
metadata_CT_who[which(metadata_CT_who$who_variants == "Kappa"),31] <- 'Other'
metadata_CT_who[which(metadata_CT_who$who_variants == "Zeta"),31] <- 'Other'
metadata_CT_who[which(metadata_CT_who$who_variants == "Lambda"),31] <- 'Other'
# attempts at Table 1
table1_old = read.csv("data/Table1.csv")
View(table1_old)
# attempts at Table 1
table1_old = read.csv("data/Table1.csv")
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
group_by() %>% count(`who_variants`)
colnames(cumulative) = c("WHO.label","Cumulative.sequenced.cases.")
tab = merge(table1_old,cumulative[,c("WHO.label","Cumulative.sequenced.cases.")], by = "WHO.label", all.x = TRUE)
last_3_weeks <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
subset(`date` >= "2022-06-02") %>% # update date every 3 weeks
count(`who_variants`) %>%
mutate(freq = round(100*n/sum(n),2))
colnames(last_3_weeks) = c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")
table1_new = merge(tab,last_3_weeks[,c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")], by = "WHO.label", all.x = TRUE)
table1_new[is.na(table1_new)] <- 0
table1_new$`Percent.change.from.previous.report.y` = table1_new$`Percent.sequenced.from.past.3.weeks...y` - table1_new$`Percent.sequenced.from.past.3.weeks...x`
table1_new = table1_new[,-c(4:7)]
View(table1_new)
View(last_3_weeks)
table1_new = merge(tab,last_3_weeks[,c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")], by = "WHO.label", all.x = TRUE)
table1_new = merge(tab,last_3_weeks[,c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")], by = "WHO.label", all.x = TRUE)
table1_new = merge(tab,last_3_weeks[,c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")], by = "WHO.label", all.x = TRUE)
table1_new[is.na(table1_new)] <- 0
View(last_3_weeks)
View(last_3_weeks)
table1_new = merge(tab,last_3_weeks[,c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")], by = "WHO.label", all.x = TRUE)
View(cumulative)
View(last_3_weeks)
# attempts at Table 1
table1_old = read.csv("data/Table1.csv")
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
group_by() %>% count(`who_variants`)
colnames(cumulative) = c("WHO.label","Cumulative.sequenced.cases.")
tab = merge(table1_old,cumulative[,c("WHO.label","Cumulative.sequenced.cases.")], by = "WHO.label", all.x = TRUE)
last_3_weeks <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
subset(`date` >= "2022-06-02") %>% # update date every 3 weeks
count(`who_variants`) %>%
mutate(freq = round(100*n/sum(n),2))
colnames(last_3_weeks) = c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")
table1_new = merge(tab,last_3_weeks[,c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")], by = "WHO.label", all.x = TRUE)
View(table1_new)
table1_new[is.na(table1_new)] <- 0
table1_new$`Percent.change.from.previous.report.y` = table1_new$`Percent.sequenced.from.past.3.weeks...y` - table1_new$`Percent.sequenced.from.past.3.weeks...x`
table1_new$`Percent.change.from.previous.report.y` = as.numeric(table1_new$`Percent.sequenced.from.past.3.weeks...y`) - as.numeric(table1_new$`Percent.sequenced.from.past.3.weeks...x`)
View(table1_new)
as.numeric(table1_new$Percent.sequenced.from.past.3.weeks...x)
# attempts at Table 1
table1_old = read.csv("data/Table1.csv")
cumulative <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
group_by() %>% count(`who_variants`)
colnames(cumulative) = c("WHO.label","Cumulative.sequenced.cases.")
tab = merge(table1_old,cumulative[,c("WHO.label","Cumulative.sequenced.cases.")], by = "WHO.label", all.x = TRUE)
last_3_weeks <- metadata_CT_who %>%
select(`date`,`who_variants`,`pango_lineage`) %>%
subset(`date` >= "2022-06-02") %>% # update date every 3 weeks
count(`who_variants`) %>%
mutate(freq = round(100*n/sum(n),2))
colnames(last_3_weeks) = c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")
table1_new = merge(tab,last_3_weeks[,c("WHO.label","Total.sequenced.from.past.3.weeks..","Percent.sequenced.from.past.3.weeks..")], by = "WHO.label", all.x = TRUE)
table1_new[is.na(table1_new)] <- 0
table1_new$`Percent.change.from.previous.report.y` = table1_new$`Percent.sequenced.from.past.3.weeks...y` - table1_new$`Percent.sequenced.from.past.3.weeks...x`
table1_new = table1_new[,-c(4:7)]
colnames(table1_new) = c("WHO label",
"Pango lineage",
"CDC classification",
"Cumulative sequenced cases*",
"Total sequenced from past 3 weeks**",
"Percent sequenced from past 3 weeks**",
"Percent change from previous report")
View(table1_new)
write.csv(table1_new,"data/Table1_new.csv")
runApp()
shiny::runApp()
# attempts at subsampler
cases_weekly = read.table("data/matrix_cases_epiweeks.tsv", sep = "\t", header = TRUE)
cases_weekly_filtered = cases_weekly[-c(1:4),1]
#PACKAGE INSTALL ####
packages = c("outbreakinfo", "ggalluvial", "readr", "dplyr","stringr","ggplot2","RColorBrewer","cowplot","packcircles","plotly")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
rm(packages, package.check)
set.seed(1234)
# attempts at subsampler
cases_weekly = read.table("data/matrix_cases_epiweeks.tsv", sep = "\t", header = TRUE)
cases_weekly_filtered = cases_weekly[-c(1:4),1]
sampling_weekly = read.table("data/weekly_sampling_proportions.tsv", sep = "\t", header = TRUE)
sampling_weekly_filtered = sampling_weekly[-c(1:4),3]
time = cases_weekly[-c(1:4),2]
subsampler = data.frame(time,cases_weekly_filtered,sampling_weekly_filtered)
subsampler$cases_weekly_filtered = as.numeric(subsampler$cases_weekly_filtered)
# attempts at subsampler
cases_weekly = read.table("data/matrix_cases_epiweeks.tsv", sep = "\t", header = TRUE)
View(cases_weekly)
########Ct Values by Lineages#############
glab = read.csv("data/GLab_SC2_sequencing_data - Sample metadata.csv")
######Assign BA.1 vs BA.2 ######
BA1vs2 <- glab %>% mutate(BA1V2 = pango_lineage)
View(glab)
######Assign BA.1 vs BA.2 ######
BA1vs2 <- glab %>% mutate(BA1V2 = Lineage)
BA1vs2$BA1V2 <- substr(BA1vs2$BA1V2, 1,4)
#include only samples with lineage assignments
BA1vs2 <- BA1vs2 %>% dplyr::filter(`BA1V2` %in% c("BA.1", "BA.5"))
#Count
countBA1 <- count(BA1vs2 %>% dplyr::filter(`BA1V2` == c("BA.1")))
countBA2 <- count(BA1vs2 %>% dplyr::filter(`BA1V2` == c("BA.2")))
#######Plot#########
intercept <- BA1vs2 %>% dplyr::filter(`BA1V2` == c("BA.1"))
intercept <- intercept$`Yale-N1(FAM)`
intercept <- mean(intercept)
BA1_2 <- ggplot(data = BA1vs2, aes(x= `BA1V2`, y = `Yale-N1(FAM)`))+
geom_hline(yintercept = intercept,colour = "lightgrey")+
geom_boxplot(width=0.4,outlier.shape = NA,colour = "#666666")+
geom_jitter(aes(col =`BA1V2`), alpha = 0.2,size = 0.2, stroke = 2,shape = 21, width = 0.15)+
labs(title="BA.1 vs BA.2 Ct value (N)",x=NULL, y = "Ct (N)")+
scale_color_brewer(palette="Dark2")+
coord_fixed(ratio = 0.06)+
scale_y_reverse(breaks = seq(10, 40, by = 5))+
theme_classic()+theme(legend.position="none",axis.text = element_text(size = 10, color = "black",face ="bold"),
axis.title=element_text(size=12, face ="bold"),title=element_text(size=14, face ="bold"))
BA1_2
#######Plot#########
intercept <- BA1vs2 %>% dplyr::filter(`BA1V2` == c("BA.1"))
View(intercept)
colnames(intercept)
intercept <- intercept$`Yale.N1.FAM.`
intercept <- mean(intercept)
BA1_2 <- ggplot(data = BA1vs2, aes(x= `BA1V2`, y = `Yale.N1.FAM.`))+
geom_hline(yintercept = intercept,colour = "lightgrey")+
geom_boxplot(width=0.4,outlier.shape = NA,colour = "#666666")+
geom_jitter(aes(col =`BA1V2`), alpha = 0.2,size = 0.2, stroke = 2,shape = 21, width = 0.15)+
labs(title="BA.1 vs BA.2 Ct value (N)",x=NULL, y = "Ct (N)")+
scale_color_brewer(palette="Dark2")+
coord_fixed(ratio = 0.06)+
scale_y_reverse(breaks = seq(10, 40, by = 5))+
theme_classic()+theme(legend.position="none",axis.text = element_text(size = 10, color = "black",face ="bold"),
axis.title=element_text(size=12, face ="bold"),title=element_text(size=14, face ="bold"))
BA1_2
intercept <- intercept$`Yale.N1.FAM.`
#######Plot#########
intercept <- BA1vs2 %>% dplyr::filter(`BA1V2` == c("BA.1"))
intercept <- intercept$`Yale.N1.FAM.`
#######Plot#########
intercept_char <- BA1vs2 %>% dplyr::filter(`BA1V2` == c("BA.1"))
intercept <- as.numeric(intercept_char$`Yale.N1.FAM.`)
intercept <- mean(intercept)
intercept <- as.numeric(intercept_char$`Yale.N1.FAM.`)
intercept <- mean(intercept,na.rm = TRUE)
BA1_2 <- ggplot(data = BA1vs2, aes(x= `BA1V2`, y = `Yale.N1.FAM.`))+
geom_hline(yintercept = intercept,colour = "lightgrey")+
geom_boxplot(width=0.4,outlier.shape = NA,colour = "#666666")+
geom_jitter(aes(col =`BA1V2`), alpha = 0.2,size = 0.2, stroke = 2,shape = 21, width = 0.15)+
labs(title="BA.1 vs BA.2 Ct value (N)",x=NULL, y = "Ct (N)")+
scale_color_brewer(palette="Dark2")+
coord_fixed(ratio = 0.06)+
scale_y_reverse(breaks = seq(10, 40, by = 5))+
theme_classic()+theme(legend.position="none",axis.text = element_text(size = 10, color = "black",face ="bold"),
axis.title=element_text(size=12, face ="bold"),title=element_text(size=14, face ="bold"))
BA1_2
View(BA1vs2)
BA1_2 <- ggplot(data = BA1vs2, aes(x= `BA1V2`, y = as.numeric(`Yale.N1.FAM.`)))+
geom_hline(yintercept = intercept,colour = "lightgrey")+
geom_boxplot(width=0.4,outlier.shape = NA,colour = "#666666")+
geom_jitter(aes(col =`BA1V2`), alpha = 0.2,size = 0.2, stroke = 2,shape = 21, width = 0.15)+
labs(title="BA.1 vs BA.2 Ct value (N)",x=NULL, y = "Ct (N)")+
scale_color_brewer(palette="Dark2")+
coord_fixed(ratio = 0.06)+
scale_y_reverse(breaks = seq(10, 40, by = 5))+
theme_classic()+theme(legend.position="none",axis.text = element_text(size = 10, color = "black",face ="bold"),
axis.title=element_text(size=12, face ="bold"),title=element_text(size=14, face ="bold"))
BA1_2
View(countBA2)
BA1_2 <- ggplot(data = glab, aes(x= `Lineage`, y = as.numeric(`Yale.N1.FAM.`)))+
geom_hline(yintercept = intercept,colour = "lightgrey")+
geom_boxplot(width=0.4,outlier.shape = NA,colour = "#666666")+
geom_jitter(aes(col =`BA1V2`), alpha = 0.2,size = 0.2, stroke = 2,shape = 21, width = 0.15)+
labs(title="BA.1 vs BA.2 Ct value (N)",x=NULL, y = "Ct (N)")+
scale_color_brewer(palette="Dark2")+
coord_fixed(ratio = 0.06)+
scale_y_reverse(breaks = seq(10, 40, by = 5))+
theme_classic()+theme(legend.position="none",axis.text = element_text(size = 10, color = "black",face ="bold"),
axis.title=element_text(size=12, face ="bold"),title=element_text(size=14, face ="bold"))
BA1_2
BA1_2 <- ggplot(data = glab, aes(x= `Lineage`, y = as.numeric(`Yale.N1.FAM.`)))+
geom_hline(yintercept = intercept,colour = "lightgrey")+
geom_boxplot(width=0.4,outlier.shape = NA,colour = "#666666")+
geom_jitter(aes(col =`BA1V2`), alpha = 0.2,size = 0.2, stroke = 2,shape = 21, width = 0.15)+
labs(title="Omicron variants Ct value (N)",x=NULL, y = "Ct (N)")+
scale_color_brewer(palette="Dark2")+
coord_fixed(ratio = 0.06)+
scale_y_reverse(breaks = seq(10, 40, by = 5))+
theme_classic()+theme(legend.position="none",axis.text = element_text(size = 10, color = "black",face ="bold"),
axis.title=element_text(size=12, face ="bold"),title=element_text(size=14, face ="bold"))
BA1_2
BA1_2 <- ggplot(data = glab, aes(x= `Lineage`, y = as.numeric(`Yale.N1.FAM.`)))+
geom_hline(yintercept = intercept,colour = "lightgrey")+
geom_boxplot(width=0.4,outlier.shape = NA,colour = "#666666")+
geom_jitter(aes(col =`Lineage`), alpha = 0.2,size = 0.2, stroke = 2,shape = 21, width = 0.15)+
labs(title="Omicron variants Ct value (N)",x=NULL, y = "Ct (N)")+
scale_color_brewer(palette="Dark2")+
coord_fixed(ratio = 0.06)+
scale_y_reverse(breaks = seq(10, 40, by = 5))+
theme_classic()+theme(legend.position="none",axis.text = element_text(size = 10, color = "black",face ="bold"),
axis.title=element_text(size=12, face ="bold"),title=element_text(size=14, face ="bold"))
BA1_2
######Assign BA.1 vs BA.2 ######
Ct_vals <- glab %>% mutate(BA1V2 = Lineage)
######Assign BA.1 vs BA.2 ######
Ct_vlues <- glab %>% mutate(Ctvals = Lineage)
######Assign BA.1 vs BA.2 ######
Ct_values <- glab %>% mutate(Ctvals = Lineage)
Ct_values$Ctvals <- substr(BA1vs2$BA1V2, 1,4)
View(Ct_values)
Ct_values$Ctvals <- substr(Ct_values$Ctvals, 1,4)
?substr
#include only samples with lineage assignments
BA1vs2 <- BA1vs2 %>% dplyr::filter(`Ctvals` %in% c("BA.1", "BA.2","BA.4","BA.5"))
########Ct Values by Lineages#############
glab = read.csv("data/GLab_SC2_sequencing_data - Sample metadata.csv")
######Assign BA.1 vs BA.2 ######
glab_filt <- glab %>% mutate(Ctvals = Lineage)
glab_filt$Ctvals <- substr(glab_filt$Ctvals, 1,4)
#include only samples with lineage assignments
Ct_values <- glab_filt %>% dplyr::filter(`Ctvals` %in% c("BA.1", "BA.2","BA.4","BA.5"))
BA1_2 <- ggplot(data = Ct_values, aes(x= `Ctvals`, y = as.numeric(`Yale.N1.FAM.`)))+
geom_hline(yintercept = intercept,colour = "lightgrey")+
geom_boxplot(width=0.4,outlier.shape = NA,colour = "#666666")+
geom_jitter(aes(col =`Ctvals`), alpha = 0.2,size = 0.2, stroke = 2,shape = 21, width = 0.15)+
labs(title="Omicron variants Ct value (N)",x=NULL, y = "Ct (N)")+
scale_color_brewer(palette="Dark2")+
coord_fixed(ratio = 0.06)+
scale_y_reverse(breaks = seq(10, 40, by = 5))+
theme_classic()+theme(legend.position="none",axis.text = element_text(size = 10, color = "black",face ="bold"),
axis.title=element_text(size=12, face ="bold"),title=element_text(size=14, face ="bold"))
#######Plot#########
intercept_char <- Ct_values %>% dplyr::filter(`Ctvals` == c("BA.1"))
intercept <- as.numeric(intercept_char$`Yale.N1.FAM.`)
intercept <- mean(intercept,na.rm = TRUE)
BA1_2 <- ggplot(data = Ct_values, aes(x= `Ctvals`, y = as.numeric(`Yale.N1.FAM.`)))+
geom_hline(yintercept = intercept,colour = "lightgrey")+
geom_boxplot(width=0.4,outlier.shape = NA,colour = "#666666")+
geom_jitter(aes(col =`Ctvals`), alpha = 0.2,size = 0.2, stroke = 2,shape = 21, width = 0.15)+
labs(title="Omicron variants Ct value (N)",x=NULL, y = "Ct (N)")+
scale_color_brewer(palette="Dark2")+
coord_fixed(ratio = 0.06)+
scale_y_reverse(breaks = seq(10, 40, by = 5))+
theme_classic()+theme(legend.position="none",axis.text = element_text(size = 10, color = "black",face ="bold"),
axis.title=element_text(size=12, face ="bold"),title=element_text(size=14, face ="bold"))
Ct_graph <- ggplot(data = Ct_values, aes(x= `Ctvals`, y = as.numeric(`Yale.N1.FAM.`)))+
geom_hline(yintercept = intercept,colour = "lightgrey")+
geom_boxplot(width=0.4,outlier.shape = NA,colour = "#666666")+
geom_jitter(aes(col =`Ctvals`), alpha = 0.2,size = 0.2, stroke = 2,shape = 21, width = 0.15)+
labs(title="Omicron variants Ct value (N)",x=NULL, y = "Ct (N)")+
scale_color_brewer(palette="Dark2")+
coord_fixed(ratio = 0.06)+
scale_y_reverse(breaks = seq(10, 40, by = 5))+
theme_classic()+theme(legend.position="none",axis.text = element_text(size = 10, color = "black",face ="bold"),
axis.title=element_text(size=12, face ="bold"),title=element_text(size=14, face ="bold"))
Ct_graph
runApp()
runApp()
runApp()
# attempts at subsampler
cases_weekly = read.table("data/matrix_cases_epiweeks.tsv", sep = "\t", header = TRUE)
View(cases_weekly)
cases_weekly_CT = cases_weekly[which(cases_weekly$code == "CT"),]
cases_weekly_CT = t(cases_weekly[which(cases_weekly$code == "CT"),])
View(cases_weekly)
sampling_weekly = read.table("data/weekly_sampling_proportions.tsv", sep = "\t", header = TRUE)
View(sampling_weekly)
View(sampling_weekly)
sampling_weekly_CT = t(sampling_weekly[which(sampling_weekly$code == "CT"),])
week
week_CT = colnames(cases_weekly)
week_CT = colnames(cases_weekly)[-c(1:2)]
# attempts at subsampler
cases = read.table("data/matrix_cases_epiweeks.tsv", sep = "\t", header = TRUE)
cases_CT = t(cases[which(cases$code == "CT"),])
cases_weekly_CT
cases_CT_filt = cases_CT[-c(1:2)]
sampling = read.table("data/weekly_sampling_proportions.tsv", sep = "\t", header = TRUE)
sampling_CT = t(sampling[which(sampling$code == "CT"),])
sampling_CT_filt = sampling_CT[-c(1:2)]
sampling_CT = t(sampling[which(sampling$code == "CT"),])
sampling_CT_filt = sampling_CT[-c(1:2)]
cases_CT_filt = cases_CT[-c(1:3)]
sampling = read.table("data/weekly_sampling_proportions.tsv", sep = "\t", header = TRUE)
sampling_CT = t(sampling[which(sampling$code == "CT"),])
sampling_CT_filt = sampling_CT[-c(1:3)]
week_CT = colnames(cases)[-c(1:3)]
subsampler = data.frame(time,cases_weekly_filtered,sampling_weekly_filtered)
subsampler = data.frame(week_CT,cases_CT_filt,sampling_CT_filt)
subsampler = data.frame(week_CT,cases_CT_filt,sampling_CT_filt)
subsampler$cases_CT_filt = as.numeric(subsampler$cases_CT_filt)
subsampler$sampling_CT_filt = as.numeric(subsampler$sampling_CT_filt)
rm(cases_weekly,cases_CT,sampling,sampling_CT)
rm(cases_weekly,cases_CT,cases_CT_filt,sampling,sampling_CT,sampling_CT_filt,week_CT)
ylim.prim <- c(0, 70000)
ylim.sec <- c(0, 100)
b <- diff(ylim.prim)/diff(ylim.sec)
a <- ylim.prim[1] - b*ylim.sec[1]
subsampler_plot <- ggplot(subsampler, aes(x=`week_CT`)) +
geom_col(aes(y=cases_CT_filt), color = "darkblue") +
geom_point(aes(y=sampling_CT_filt*b+a), color = "darkred") +
#geom_line(aes(y=sampling_weekly_filtered*b+a), color = "darkred")+
xlab("Week") +
scale_y_continuous("weekly cases", sec.axis = sec_axis(~ (. - a)/b, name = "%seq")) +
theme_classic() +
theme(axis.text.y.right = element_text(color = "darkred"),
axis.title.y.right = element_text(color = "darkred"),
axis.text.y.left = element_text(color = "darkblue"),
axis.title.y.left = element_text(color = "darkblue"),
axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Total COVID-19 cases in Connecticut")
subsampler_plot
runApp()
runApp()
